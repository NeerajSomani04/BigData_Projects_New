Couple of Questions:

1) In section "Queries to run", its mention that Comment_ID must match across all 3 dataset but looks like Comment_ID is not present in "Post_meta.zip" file data set. Hence, comment_ID is present in 2 data sets "comment_text" and "comment_info_jsonl". Is this understanding correct? I need to consider it only for these 2 data sets.

2) 


Below are commands used to perform some activity -->

Below command to create Hive database --> 
CREATE DATABASE IF NOT EXISTS Viacom_Test; 

Drop table comment_text;
CREATE TABLE IF NOT EXISTS comment_text (
message STRING,
h_id STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

Load data local inpath '/home/dkothari/vi-com/BigData_Projects_New/comment_text' into table comment_text;

describe formatted comment_text; --> this command can be used to see the details of hive table.

Below is the hive data warehouse location for our database -->
hdfs://nn01.itversity.com:8020/apps/hive/warehouse/viacom_test.db/comment_text

hdfs dfs -put /home/dkothari/vi-com/BigData_Projects_New/post_meta/ vi-com/BigData_Project/post_meta

Below command is for post_meta parquet files --  COMPRESSED WITH SNAPPY

Drop table post_meta;

CREATE EXTERNAL TABLE IF NOT EXISTS post_meta (post_h_id STRING, post_created_time TIMESTAMP, name_h_id STRING, type STRING) 
STORED AS PARQUET 
TBLPROPERTIES ('PARQUET.COMPRESS'='SNAPPY');

Load data local inpath '/home/dkothari/vi-com/BigData_Projects_New/post_meta' into table post_meta;

describe formatted post_meta;

Drop table comment_info_jsonl;

CREATE EXTERNAL TABLE IF NOT EXISTS comment_info_jsonl (
text STRING)
ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe';

CREATE EXTERNAL TABLE IF NOT EXISTS comment_info_jsonl (
h_id STRING
, posts struct< 
data: array < struct <
comments: struct < 
data: array< struct < 
comment_count: INT
, comments: struct < 
data: array < struct < 
comment_count: INT
, created_time: STRING
, h_id: STRING
, parent: struct < 
h_id: STRING
>
, up_likes: INT
> > >
, created_time: STRING
, h_id: STRING
, up_likes: INT 
> > >
, h_id: STRING 
> > >
)
ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe'
STORED AS TEXTFILE;

I downloaded jar from below path --
http://snowplow-hosted-assets.s3.amazonaws.com/third-party/rcongiu/json-serde-1.1.6-jar-with-dependencies.jar

add jar /home/dkothari/json-serde-1.1.6-jar-with-dependencies.jar; -- this command added the jar in hive consol.

-- this serde is working -- 'org.apache.hive.hcatalog.data.JsonSerDe'
we might need this serde -- org.openx.data.jsonserde.JsonSerDe 

Load data local inpath '/home/dkothari/vi-com/BigData_Projects_New/comment_info_jsonl' into table comment_info_jsonl;

for cloudera -->
Load data local inpath '/home/cloudera/vi-com/BigData_Projects_New/comment_info_jsonl' into table comment_info_jsonl;


Below are queries:
1) this query is used to get count of posts :
select count(distinct post_h_id) from (select explode(posts.data.h_id) as post_h_id from comment_info_jsonl) as temp; -- 297 distinct
select count(distinct post_h_id) from post_meta; -- 3531 distinct

select count(distinct PM.post_h_id)
from (select explode(posts.data.h_id) as post_h_id from comment_info_jsonl) as CIJ 
INNER JOIN post_meta as PM
on CIJ.post_h_id = PM.post_h_id; -- 282 distinct 

Questions for Queries:

1) Which day had the highest number of top level comments (excluding replies)?
Solution:

--- Below SQL took 7 min on one node cluster ---

select to_date(temp1.comment_created_time) as comment_created_time, sum(temp1.comment_count) as total_comments
from 
(select CIE.*,
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_new CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT
ON CT.h_id = CIE.comment_id) 
as temp1
where temp1.row_num = 1
group by to_date(temp1.comment_created_time)
order by total_comments desc
limit 1;

Result :- Date: 2018-01-10 (10-Jan-2018) , Total comments: 610
------------------------

select to_date(temp1.comment_created_time) as comment_created_time, sum(temp1.comment_count) as total_comments
from 
(select CIE.*,
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_with_replies CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT
ON CT.h_id = CIE.comment_id) 
as temp1
where temp1.row_num = 1
group by to_date(temp1.comment_created_time)
order by total_comments desc
limit 1;

Result :- Date: 2018-01-10 (10-Jan-2018) , Total comments: 600

-- MTU5MTY0Njk3NzU5MTYzMl8xNTkxNjU4MTUwOTIzODQ4 ---
----------
select to_date(temp1.comment_created_time) as comment_created_time, sum(temp1.comment_count) as total_comments
from 
(select CIE.*,
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_with_replies_new CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT
ON CT.h_id = CIE.comment_id) 
as temp1
where temp1.row_num = 1
group by to_date(temp1.comment_created_time)
order by total_comments desc
limit 1;

Result :- Date: 2018-01-10 (10-Jan-2018) , Total comments: 600

---------------------------
if I consider count of comment_id as per below SQL:

select to_date(temp1.comment_created_time) as comment_created_time, count(distinct temp1.comment_id) as total_comments
from 
(select CIE.*,
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_with_replies CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT
ON CT.h_id = CIE.comment_id) 
as temp1
where temp1.row_num = 1
group by to_date(temp1.comment_created_time)
order by total_comments desc
limit 1;

Result :- Date: 2018-01-10 (10-Jan-2018) , Total comments: 321

---------------------------------
if I consider reply_id as well for comparision with comment_text dataset :

select to_date(temp1.comment_created_time) as comment_created_time, count(distinct temp1.comment_id) as total_comments
from 
(select CIE.*,
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_with_replies CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT_top
ON CT_top.h_id = CIE.comment_id 
INNER JOIN comment_text CT_reply
ON CT_reply.h_id = CIE.reply_id) 
as temp1
where temp1.row_num = 1
group by to_date(temp1.comment_created_time)
order by total_comments desc
limit 1;

Result :- Date: 2018-01-10 (10-Jan-2018) , Total comments: 312

--------------------------------

Below are few SQLs used to create above solution.

select count(*) from comment_info_exploded_with_replies_new ; -- 5704
select count(*) from comment_info_exploded_with_replies; -- 15799

Create table comment_info_exploded_with_replies as
select 
post_data.h_id as post_id,
comments_data.comment_count,
comments_data.up_likes as comment_like_count,
comments_data.h_id as comment_id,
cast(from_unixtime(unix_timestamp(regexp_replace(comments_data.created_time, 'T',' '))) as timestamp) as comment_created_time,
reply_data.comment_count as reply_count,
cast(from_unixtime(unix_timestamp(regexp_replace(reply_data.created_time, 'T',' '))) as timestamp) as reply_created_time,
reply_data.h_id as reply_id,
reply_data.parent.h_id as reply_parent_comment_id,
reply_data.up_likes as reply_like_count
from comment_info_jsonl 
LATERAL VIEW explode(posts.data) exploded_post as post_data
lateral view explode(post_data.comments.data) comments_exploded as comments_data
lateral view explode(comments_data.comments.data) reply_exploded as reply_data;

----------
drop table comment_info_exploded_with_replies_new;

Create table comment_info_exploded_with_replies_new as
select distinct * from (select
h_id as page_id,
post_data.h_id as post_id,
comments_data.comment_count,
comments_data.up_likes as comment_like_count,
comments_data.h_id as comment_id,
cast(from_unixtime(unix_timestamp(regexp_replace(comments_data.created_time, 'T',' '))) as timestamp) as comment_created_time,
reply_data.comment_count as reply_count,
cast(from_unixtime(unix_timestamp(regexp_replace(reply_data.created_time, 'T',' '))) as timestamp) as reply_created_time,
reply_data.h_id as reply_id,
reply_data.parent.h_id as reply_parent_comment_id,
reply_data.up_likes as reply_like_count
from comment_info_jsonl 
LATERAL VIEW explode(posts.data) exploded_post as post_data
lateral view explode(post_data.comments.data) comments_exploded as comments_data
lateral view explode(comments_data.comments.data) reply_exploded as reply_data) as temp;

-----------------
Drop table comment_info_exploded;
Create table comment_info_exploded as
select 
post_data.h_id as post_id,
comments_data.comment_count,
comments_data.up_likes as comment_like_count,
comments_data.h_id as comment_id,
cast(from_unixtime(unix_timestamp(regexp_replace(comments_data.created_time, 'T',' '))) as timestamp) as comment_created_time
from comment_info_jsonl 
LATERAL VIEW explode(posts.data) exploded_post as post_data
lateral view explode(post_data.comments.data) comments_exploded as comments_data;

-------------------

Create table comment_info_exploded_new as
select distinct * from (select 
post_data.h_id as post_id,
comments_data.comment_count,
comments_data.up_likes as comment_like_count,
comments_data.h_id as comment_id,
cast(from_unixtime(unix_timestamp(regexp_replace(comments_data.created_time, 'T',' '))) as timestamp) as comment_created_time
from comment_info_jsonl 
LATERAL VIEW explode(posts.data) exploded_post as post_data
lateral view explode(post_data.comments.data) comments_exploded as comments_data) as temp;


select count(*) from comment_info_exploded; -- 46422

select count(*) from (select distinct * from comment_info_exploded) as temp; -- 15388



---------------- few analysis points -----
select count(*) from 
(select CIE.*, PM.type as post_type,
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_with_replies_New CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT_top
ON CT_top.h_id = CIE.comment_id 
INNER JOIN comment_text CT_reply
ON CT_reply.h_id = CIE.reply_id) 
as temp1
where temp1.row_num = 1 

Result : 2663

--------------
----- Here if we select only distinct rows ----
---------------
select count(*) from 
(select distinct * from (select CIE.*, PM.type as post_type,
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_with_replies_New CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT_top
ON CT_top.h_id = CIE.comment_id 
INNER JOIN comment_text CT_reply
ON CT_reply.h_id = CIE.reply_id) 
as temp1
where temp1.row_num = 1) as temp2

Result : 2663

-------------------


for question 2)
----------------------------
select temp1.post_type, count(distinct temp1.comment_id) as total_comments, sum(comment_like_count) as total_up_likes
from 
(select CIE.*, PM.type as post_type,
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_with_replies_New CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT_top
ON CT_top.h_id = CIE.comment_id 
INNER JOIN comment_text CT_reply
ON CT_reply.h_id = CIE.reply_id) 
as temp1
where temp1.row_num = 1 
and to_date(temp1.comment_created_time) > '2018-01-10'
and to_date(temp1.reply_created_time) > '2018-01-10'
group by temp1.post_type;


---------------

for question 3) 

--------
select page_id, page_name, 
cast(((avg(length(comment_text)) + avg(length(reply_text)))/2) as SMALLINT) as avg_length_per_comment
from 
(select CIE.page_id as page_id, CT_top.h_id as comment_id, CT_reply.h_id as reply_id, CT_top.message as comment_text, CT_reply.message as reply_text, PM.name_h_id as page_name,
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_with_replies_New CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT_top
ON CT_top.h_id = CIE.comment_id 
INNER JOIN comment_text CT_reply
ON CT_reply.h_id = CIE.reply_id) 
as temp1
where temp1.row_num = 1 
group by temp1.page_id, temp1.page_name
order by avg_length_per_comment desc;

-----

for question 4)

-----------
select CIE_2.post_id as post_id, temp2.comment_id, temp2.number_replies, 
from comment_info_exploded_with_replies_New CIE_2
INNER JOIN 
(select comment_id, count(reply_id) as number_replies
from 
(select CT_top.h_id as comment_id, CT_reply.h_id as reply_id, 
row_number() over (partition by comment_id order by comment_created_time desc, comment_like_count desc, comment_count desc) as row_num
from comment_info_exploded_with_replies_New CIE 
INNER JOIN post_meta PM
on PM.post_h_id = CIE.post_id
INNER JOIN comment_text CT_top
ON CT_top.h_id = CIE.comment_id 
INNER JOIN comment_text CT_reply
ON CT_reply.h_id = CIE.reply_id) 
as temp1
where temp1.row_num = 1
group by temp1.comment_id
order by number_replies desc 
limit 5) as temp2
ON CIE_2.comment_id = temp2.comment_id



