Environment set-up commands -->
----------------
This will help in resolving memory issue while working with joins
--------------------------
set hive.enforce.bucketing = true;
set hive.auto.convert.join = false; 
set hive.optimize.bucketmapjoin = true;
set hive.optimize.bucketmapjoin.sortedmerge = true;
set hive.exec.parallel=true;
SET hive.exec.dynamic.partition= true; 
SET hive.exec.dynamic.partition.mode= nonstrict;

Notes:- partition column should be last column in selet query

Below command to create Hive database --> 

CREATE DATABASE IF NOT EXISTS Viacom_Test; 

Below command to create hive table for comment_text dataset.

-- Drop table comment_text_STG; -- use this command to drop table if needed.

CREATE EXTERNAL TABLE IF NOT EXISTS comment_text_STG (
message STRING,
h_id STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;
----------- 
Use below command to load data from local system to hive table.

Load data local inpath '/home/dkothari/vi-com/BigData_Projects_New/comment_text' into table comment_text_stg;

----------- new table could be like below -----
CREATE EXTERNAL TABLE IF NOT EXISTS comment_text (
message STRING,
h_id STRING)
CLUSTERED BY (h_id) SORTED BY (message) into 64 buckets
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

INSERT overwrite table comment_text select distinct * from comment_text_stg;

select count(*) from comment_text_stg; -- 859217
select count(*) from (select distinct * from comment_text_stg) as temp; -- 859183

Below command is to create table for post_meta dataset files.

Drop table post_meta_stg;

CREATE EXTERNAL TABLE IF NOT EXISTS post_meta_stg (post_h_id STRING, post_created_time TIMESTAMP, name_h_id STRING, type STRING) 
STORED AS PARQUET 
TBLPROPERTIES ('PARQUET.COMPRESS'='SNAPPY');

below command is to load data from local system to post_meta tables.

Load data local inpath '/home/dkothari/vi-com/BigData_Projects_New/post_meta' into table post_meta_stg;

select count(*) from post_meta_stg; -- 40800
select count(*) from (select distinct * from post_meta_stg) as temp; -- 3531

--------- new table could be ----
CREATE EXTERNAL TABLE IF NOT EXISTS post_meta (post_h_id STRING, post_created_time TIMESTAMP, name_h_id STRING)
PARTITIONED BY(type STRING)
CLUSTERED BY(post_h_id) SORTED BY (post_h_id) INTO 8 BUCKETS
STORED AS PARQUET 
TBLPROPERTIES ('PARQUET.COMPRESS'='SNAPPY');
-----------------------

INSERT overwrite table post_meta PARTITION (type) select distinct * from post_meta_stg;

-----------------------------

Below command is to create table for comment_info_jsonl dataset.

CREATE EXTERNAL TABLE IF NOT EXISTS comment_info_jsonl (
h_id STRING
, posts struct< 
data: array < struct <
comments: struct < 
data: array< struct < 
comment_count: INT
, comments: struct < 
data: array < struct < 
comment_count: INT
, created_time: STRING
, h_id: STRING
, parent: struct < 
h_id: STRING
>
, up_likes: INT
> > >
, created_time: STRING
, h_id: STRING
, up_likes: INT 
> > >
, h_id: STRING 
> > >
)
ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe'
STORED AS TEXTFILE;

Load data local inpath '/home/cloudera/vi-com/BigData_Projects_New/comment_info_jsonl' into table comment_info_jsonl;

select count(*) from comment_info_jsonl; -- 744

run below command to add json serde to parse json files properly.

add jar /usr/lib/hive-hcatalog/share/hcatalog/hive-hcatalog-core.jar ;

select count(*) from comment_info_exploded_with_replies_new; -- 5704
select count(*) from (select distinct * from comment_info_exploded_with_replies_new) as temp; -- 5704


----------- finalized ------
Drop table comment_info_exploded_with_replies_new_with_keys;

Create EXTERNAL TABLE IF NOT EXISTS comment_info_exploded_with_replies_new_with_keys 
(page_id STRING, post_id STRING, Comment_count int, comment_like_count int, comment_id STRING, comment_created_time timestamp,
reply_count int, reply_created_time timestamp, reply_id STRING, reply_parent_comment_id STRING, reply_like_count int)
PARTITIONED BY(comment_created_date date)
CLUSTERED BY(post_id, comment_id, reply_id) INTO 32 BUCKETS
STORED AS TEXTFILE;


Insert overwrite table comment_info_exploded_with_replies_new_with_keys PARTITION (comment_created_date)
select distinct * from (select
h_id as page_id,
post_data.h_id as post_id,
comments_data.comment_count,
comments_data.up_likes as comment_like_count,
comments_data.h_id as comment_id,
cast(from_unixtime(unix_timestamp(regexp_replace(comments_data.created_time, 'T',' '))) as timestamp) as comment_created_time,
reply_data.comment_count as reply_count,
cast(from_unixtime(unix_timestamp(regexp_replace(reply_data.created_time, 'T',' '))) as timestamp) as reply_created_time,
reply_data.h_id as reply_id,
reply_data.parent.h_id as reply_parent_comment_id,
reply_data.up_likes as reply_like_count,
cast(cast(from_unixtime(unix_timestamp(regexp_replace(comments_data.created_time, 'T',' '))) as timestamp) as date) as comment_created_date
from comment_info_jsonl 
LATERAL VIEW explode(posts.data) exploded_post as post_data
lateral view explode(post_data.comments.data) comments_exploded as comments_data
lateral view explode(comments_data.comments.data) reply_exploded as reply_data) as temp
CLUSTERED BY (temp.post_id, temp.comment_id, temp.reply_id) ;


----------
------- Below is the solution for question 1 ------
-----------
select temp1.comment_created_date as comment_created_date, count(distinct temp1.comment_id) as total_comments  from 
(
select CIE.comment_created_date, CIE.comment_id,
row_number() over (partition by comment_id, reply_id order by comment_created_time desc, comment_like_count desc, comment_count desc, reply_created_time desc, reply_like_count desc, reply_count desc) as row_num
from post_meta PM
INNER JOIN  comment_info_exploded_with_replies_new_with_keys CIE ON (PM.post_h_id = CIE.post_id)
INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id)
INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id)
) as temp1
where temp1.row_num = 1
group by temp1.comment_created_date
order by total_comments desc
limit 1;

-------------------------------------------------------------

----------
------- Below is the solution for question 4  ------
-----------
--- Below solution is incorrect because we don't need to group by temp1.name_h_id, temp1.post_id, ------ so correct it

select temp1.name_h_id, temp1.post_id, temp1.comment_id, count(distinct temp1.reply_id) as total_replies_per_comment,
dense_rank() over (order by count(distinct temp1.reply_id) desc)
from 
(
select PM.name_h_id, CIE.post_id, CIE.reply_id, CIE.comment_id,
row_number() over (partition by comment_id, reply_id order by comment_created_time desc, comment_like_count desc, comment_count desc, reply_created_time desc, reply_like_count desc, reply_count desc) as row_num
from post_meta PM
INNER JOIN  comment_info_exploded_with_replies_new_with_keys CIE ON (PM.post_h_id = CIE.post_id)
INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id)
INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id)
) as temp1
where temp1.row_num = 1
group by temp1.name_h_id, temp1.post_id, temp1.comment_id
order by total_replies_per_comment desc
limit 30;

---
select * from (
select temp1.comment_id, count(distinct temp1.reply_id) as total_replies_per_comment,
dense_rank() over (order by count(distinct temp1.reply_id) desc) as dense_rank_num
from 
(
select CIE.reply_id, CIE.comment_id,
row_number() over (partition by comment_id, reply_id order by comment_created_time desc, comment_like_count desc, comment_count desc, reply_created_time desc, reply_like_count desc, reply_count desc) as row_num
from post_meta PM
INNER JOIN  comment_info_exploded_with_replies_new_with_keys CIE ON (PM.post_h_id = CIE.post_id)
INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id)
INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id)
) as temp1
where temp1.row_num = 1 
group by temp1.comment_id
order by total_replies_per_comment desc) as temp2
where temp2.dense_rank_num < 6
limit 30;
-------------------------------------------------------------
below could be a great example for multiple records for the same combination of comment_id and reply_id

example:  total combinations are 5
comment_id = MTAxNTU1NDg1MDQ1MTkwMjJfMTAxNTU1NDg5MDE5NTkwMjI 
reply_id = MTAxNTU1NDg1MDQ1MTkwMjJfMTAxNTU1NDkwMjI1MDkwMjI 

------------- used below HQL to find above records --------::
select CIE.comment_id, CIE.reply_id, count(*) as count
from post_meta PM
INNER JOIN  comment_info_exploded_with_replies_new_with_keys CIE ON (PM.post_h_id = CIE.post_id)
INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id)
INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id)
group by CIE.comment_id, CIE.reply_id
having count(*) > 1 limit 50;
----------------------------------------
