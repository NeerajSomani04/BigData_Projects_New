CREATE DATABASE IF NOT EXISTS Viacom_New;

CREATE EXTERNAL TABLE IF NOT EXISTS comment_text_STG (
message STRING,
h_id STRING)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
STORED AS TEXTFILE;

Load data local inpath '/home/dkothari/vi-com/BigData_Projects_New/comment_text' into table comment_text_stg;

set hive.enforce.bucketing = true;
set hive.auto.convert.join = false; 
set hive.optimize.bucketmapjoin = true;
set hive.optimize.bucketmapjoin.sortedmerge = true;
set hive.exec.parallel=true;
SET hive.exec.dynamic.partition= true; 
SET hive.exec.dynamic.partition.mode= nonstrict;
set hive.vectorized.execution.enabled = true;
set hive.vectorized.execution.reduce.enabled = true;

CBO Environment related settings:
set hive.cbo.enable=true;
set hive.compute.query.using.stats=true;
set hive.stats.fetch.column.stats=true;
set hive.stats.fetch.partition.stats=true;

analyze table comment_text compute statistics for columns;
analyze table post_meta compute statistics for columns;
analyze table comment_info_exploded compute statistics for columns;


CREATE EXTERNAL TABLE IF NOT EXISTS comment_text (
message STRING,
h_id STRING)
CLUSTERED BY (h_id) SORTED BY (message) into 64 buckets
STORED AS ORC tblproperties ('orc.compress' = 'SNAPPY');

INSERT overwrite table comment_text select distinct * from comment_text_stg;

CREATE EXTERNAL TABLE IF NOT EXISTS post_meta_stg (post_h_id STRING, post_created_time TIMESTAMP, name_h_id STRING, type STRING) 
STORED AS PARQUET 
TBLPROPERTIES ('PARQUET.COMPRESS'='SNAPPY');

Load data local inpath '/home/dkothari/vi-com/BigData_Projects_New/post_meta' into table post_meta_stg;

CREATE EXTERNAL TABLE IF NOT EXISTS post_meta (post_h_id STRING, post_created_time TIMESTAMP, name_h_id STRING)
PARTITIONED BY(type STRING)
CLUSTERED BY(post_h_id) SORTED BY (post_h_id) INTO 8 BUCKETS
STORED AS ORC tblproperties ('orc.compress' = 'SNAPPY');

INSERT overwrite table post_meta PARTITION (type) select distinct * from post_meta_stg;

CREATE EXTERNAL TABLE IF NOT EXISTS comment_info_jsonl (
h_id STRING
, posts struct< 
data: array < struct <
comments: struct < 
data: array< struct < 
comment_count: INT
, comments: struct < 
data: array < struct < 
comment_count: INT
, created_time: STRING
, h_id: STRING
, parent: struct < 
h_id: STRING
>
, up_likes: INT
> > >
, created_time: STRING
, h_id: STRING
, up_likes: INT 
> > >
, h_id: STRING 
> > >
)
ROW FORMAT SERDE 'org.apache.hive.hcatalog.data.JsonSerDe'
STORED AS TEXTFILE;

Load data local inpath '/home/dkothari/vi-com/BigData_Projects_New/comment_info_jsonl' into table comment_info_jsonl;

Create EXTERNAL TABLE IF NOT EXISTS comment_info_exploded 
(page_id STRING, post_id STRING, Comment_count int, comment_like_count int, comment_id STRING, comment_created_time timestamp,
reply_count int, reply_created_time timestamp, reply_id STRING, reply_parent_comment_id STRING, reply_like_count int)
PARTITIONED BY(comment_created_date date)
CLUSTERED BY(post_id, comment_id, reply_id) INTO 32 BUCKETS
STORED AS ORC tblproperties ('orc.compress' = 'SNAPPY');


Insert overwrite table comment_info_exploded PARTITION (comment_created_date)
select distinct * from (select
h_id as page_id,
post_data.h_id as post_id,
comments_data.comment_count,
comments_data.up_likes as comment_like_count,
comments_data.h_id as comment_id,
cast(from_unixtime(unix_timestamp(regexp_replace(comments_data.created_time, 'T',' '))) as timestamp) as comment_created_time,
reply_data.comment_count as reply_count,
cast(from_unixtime(unix_timestamp(regexp_replace(reply_data.created_time, 'T',' '))) as timestamp) as reply_created_time,
reply_data.h_id as reply_id,
reply_data.parent.h_id as reply_parent_comment_id,
reply_data.up_likes as reply_like_count,
cast(cast(from_unixtime(unix_timestamp(regexp_replace(comments_data.created_time, 'T',' '))) as timestamp) as date) as comment_created_date
from comment_info_jsonl 
LATERAL VIEW explode(posts.data) exploded_post as post_data
lateral view explode(post_data.comments.data) comments_exploded as comments_data
lateral view explode(comments_data.comments.data) reply_exploded as reply_data) as temp
CLUSTER BY (temp.post_id, temp.comment_id, temp.reply_id) ;


----------
------- Below is the solution for question 1 ------
----------- 
select temp1.comment_created_date as comment_created_date, count(distinct temp1.comment_id) as total_comments  from 
(
select CIE.comment_created_date, CIE.comment_id,
row_number() over (partition by comment_id, reply_id order by comment_created_time desc, comment_like_count desc, comment_count desc, reply_created_time desc, reply_like_count desc, reply_count desc) as row_num
from post_meta PM
INNER JOIN  comment_info_exploded CIE ON (PM.post_h_id = CIE.post_id)
INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id)
INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id)
CLUSTER BY (CIE.comment_created_date) ) as temp1
where temp1.row_num = 1
group by temp1.comment_created_date
order by total_comments desc
limit 1;


-------------------
for question 2)
----------------------------
select temp1.post_type, count(distinct temp1.comment_id) as total_comments, sum(temp1.comment_like_count) as total_comments_up_likes
from 
(select CIE.comment_created_time, CIE.reply_created_time, CIE.comment_id, CIE.comment_like_count, PM.type as post_type,
row_number() over (partition by comment_id, reply_id order by comment_created_time desc, comment_like_count desc, comment_count desc, reply_created_time desc, reply_like_count desc, reply_count desc) as row_num
from comment_info_exploded CIE 
INNER JOIN post_meta PM on (PM.post_h_id = CIE.post_id)
INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id)
INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id) ) as temp1
where temp1.row_num = 1 
and to_date(temp1.comment_created_time) > '2018-01-10'
and to_date(temp1.reply_created_time) > '2018-01-10'
group by temp1.post_type;


---------------
for question 3) 
--------
select page_id, page_name, 
cast(((avg(length(comment_text)) + avg(length(reply_text)))/2) as SMALLINT) as avg_length_per_comment
from 
(select CIE.page_id as page_id, CT_top.h_id as comment_id, CT_reply.h_id as reply_id, CT_top.message as comment_text, CT_reply.message as reply_text, PM.name_h_id as page_name, 
row_number() over (partition by comment_id, reply_id order by comment_created_time desc, comment_like_count desc, comment_count desc, reply_created_time desc, reply_like_count desc, reply_count desc) as row_num
from comment_info_exploded CIE 
INNER JOIN post_meta PM on (PM.post_h_id = CIE.post_id)
INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id)
INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id) ) as temp1
where temp1.row_num = 1 
group by temp1.page_id, temp1.page_name
order by avg_length_per_comment desc;

-----
---------------
for question 4) 
--------

select distinct PM1.name_h_id, CIE1.post_id, temp3.comment_id, temp3.total_replies_per_comment, CT.message from 
( select * from (
select temp1.comment_id, count(distinct temp1.reply_id) as total_replies_per_comment,
dense_rank() over (order by count(distinct temp1.reply_id) desc) as dense_rank_num
from 
(
select CIE.comment_id, CIE.reply_id, 
row_number() over (partition by comment_id, reply_id order by comment_created_time desc, comment_like_count desc, comment_count desc, reply_created_time desc, reply_like_count desc, reply_count desc) as row_num
from post_meta PM
INNER JOIN comment_info_exploded CIE ON (PM.post_h_id = CIE.post_id)
INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id)
INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id)
) as temp1
where temp1.row_num = 1 
group by temp1.comment_id
order by total_replies_per_comment desc) as temp2
where temp2.dense_rank_num < 6 ) as temp3 
INNER JOIN comment_info_exploded CIE1 ON (temp3.comment_id = CIE1.comment_id)
INNER JOIN post_meta PM1 ON (PM1.post_h_id = CIE1.post_id)
INNER JOIN comment_text CT ON (CT.h_id = CIE1.comment_id)
order by total_replies_per_comment desc;

------
running question 4 query in spark -->

sqlContext.sql("select distinct PM1.name_h_id, CIE1.post_id, temp3.comment_id, temp3.total_replies_per_comment, CT.message from " + 
" ( select * from ( " + 
"select temp1.comment_id, count(distinct temp1.reply_id) as total_replies_per_comment, " + 
"dense_rank() over (order by count(distinct temp1.reply_id) desc) as dense_rank_num " + 
"from " + 
" ( " + 
"select CIE.comment_id, CIE.reply_id, " + 
"row_number() over (partition by comment_id, reply_id order by comment_created_time desc, comment_like_count desc, comment_count desc, " + "reply_created_time desc, reply_like_count desc, reply_count desc) as row_num " + 
"from post_meta PM " + 
"INNER JOIN comment_info_exploded CIE ON (PM.post_h_id = CIE.post_id) " + 
"INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id) " + 
"INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id) " + 
") as temp1 " + 
"where temp1.row_num = 1 " + 
"group by temp1.comment_id " + 
"order by total_replies_per_comment desc) as temp2 " + 
"where temp2.dense_rank_num < 6 ) as temp3 " + 
"INNER JOIN comment_info_exploded CIE1 ON (temp3.comment_id = CIE1.comment_id) " + 
"INNER JOIN post_meta PM1 ON (PM1.post_h_id = CIE1.post_id) " + 
"INNER JOIN comment_text CT ON (CT.h_id = CIE1.comment_id) " + 
"order by total_replies_per_comment desc").show


----
sqlContext.sql("select CIE.comment_id, CIE.reply_id, " + 
"row_number() over (partition by comment_id, reply_id order by comment_created_time desc, comment_like_count desc, comment_count desc, " + "reply_created_time desc, reply_like_count desc, reply_count desc) as row_num " + 
"from post_meta PM " + 
"INNER JOIN comment_info_exploded CIE ON (PM.post_h_id = CIE.post_id) " + 
"INNER JOIN comment_text CT_top ON (CT_top.h_id = CIE.comment_id) " + 
"INNER JOIN comment_text CT_reply ON (CT_reply.h_id = CIE.reply_id)").show
